#!/bin/bash

####### Generated by vagrant provisioning #######
### Core command shortcut ###


POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--print)
      PRINT="$2"
      shift # past argument
      shift # past value
      ;;
    -h|--help)
        echo "Usage: $0 [-h|-p <string>|<node> [<command>]]"
        echo "Print:"
        echo "  -p <string>  Prints information of core emulation"
        echo "        <string> can be:"
        echo "          - socketdir"
        echo "          - nodes"
        echo "          - ifaces"
        echo "          - hostsupdate"
        echo "          - hostsremove"
        echo "Node Command:"
        echo "  <node> can be one of emulation nodes"
        echo "  [<command>] to run on node or use bash if not specified"
        echo "Help:"
        echo "  -h, --help      Print this help"
        exit 0
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done


csocketdir(){
    # core-gui uses another process names than core-gui-legacy but this is not a problem here
    echo $(ps aux | grep -oP "/tmp/pycore.[0-99999999999].+?(?=/)" | head -n1 | awk '{print $1}' | cut -d/ -f 1-3)
}

cnodenames(){
    echo $(ls $(csocketdir) | grep conf | sed -e "s/.conf$//")
}

runcmd() {
    # new core-gui has many process, separated by spaces
    SOCKETS_DIR=$(csocketdir)
    [ -d "${SOCKETS_DIR}" ] || { echo "Core socket dir not found. Is Core running?"; return 1; }
    [ -d "${SOCKETS_DIR}/${1}.conf" ] || { echo "Core node directory not found. Does it exists?"; return 1; }
    vcmd -c $SOCKETS_DIR/$1 -- env TERM=xterm-256color /bin/bash -c "${2:-"bash"}"
}

cifaces() {
    for n in $(cnodenames); do
        runcmd $n "ip -o addr ls" | while read -r line; do
            iface=$(echo $line | awk '{print $2}')
            proto=$(echo $line | awk '{print $3}')
            nodeip=$(echo $line | awk '{print $4}' | sed -e "s/\/.*//")
            echo "$n $iface $proto $nodeip"
        done
    done
}

chostsremovehookdata() {
    [ -w /etc/hosts ] || { echo "No permission to write /etc/hosts"; return 1; }
    sed '/^### CORE HOOK ###/,/^\$/{/^### CORE HOOK ###/!{/^\$/!d}}' /etc/hosts > /tmp/temp_hosts && mv /tmp/temp_hosts /etc/hosts
    grep -v "### CORE HOOK ###" /etc/hosts > /tmp/temp_hosts && mv /tmp/temp_hosts /etc/hosts
}

chostsupdatehookdata() {
    [ -w /etc/hosts ] || { echo "No permission to write /etc/hosts"; return 1; }
    chostsremovehookdata
    echo "### CORE HOOK ### START - Do not touch this" >> /etc/hosts
    echo "# Nodes with first IP address will be used as the hostname" >> /etc/hosts
    echo $"`cifaces | grep " inet " | grep -v " lo " | sort | sort -u -k1,1 | awk '{print $4 " " $1}'`" >> /etc/hosts
    echo "# Nodes with interface name" >> /etc/hosts
    echo $"`cifaces | grep " inet " | grep -v " lo " | sort | awk '{print $4 " " $1 "_" $2}'`" >> /etc/hosts
    echo "### CORE HOOK ### END - Do not touch this" >> /etc/hosts
}


set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters


if [ -z ${PRINT} ]; then
    runcmd $@
else
    if [ "$PRINT" == "socketdir" ]; then
        csocketdir
    fi
    if [ "$PRINT" == "nodes" ]; then
        cnodenames
    fi
    if [ "$PRINT" == "ifaces" ]; then
        cifaces
    fi
    if [ "$PRINT" == "hostsupdate" ]; then
        chostsupdatehookdata
    fi
    if [ "$PRINT" == "hostsremove" ]; then
        chostsremovehookdata
    fi
fi

exit $?

